{"version":3,"sources":["listitems.js","App.js","serviceWorker.js","index.js"],"names":["Listitems","props","listItems","items","console","log","newListItems","map","item","className","key","type","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItems","library","add","faTrash","App","handleInput","setState","currentItems","Date","now","addItem","preventDefault","state","newItems","forEach","fltritems","filter","id","onSubmit","this","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAkCeA,MA3Bf,SAAoBC,GAEZ,IAAMC,EAAYD,EAAME,MACrBC,QAAQC,IAAIH,GACf,IAAMI,EAAeJ,EAAUK,KAAI,SAAAC,GAC3B,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BAAOC,KAAK,OAAQC,MAAOJ,EAAKK,KAChCC,SAAW,SAAAC,GACPd,EAAMe,UAAUD,EAAEE,OAAOL,MAAQJ,EAAKE,QAI1C,8BACA,kBAAC,IAAD,CAAiBQ,KAAK,QAAQT,UAAU,WACxCU,QAAU,kBAAMlB,EAAMmB,YAAYZ,EAAKE,cAM3D,OACI,6BAAMJ,I,sBCxBlBe,IAAQC,IAAIC,K,IAoFGC,E,kDA7Eb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAURwB,YAAc,SAAAV,GACZ,EAAKW,SAAS,CACZC,aAAc,CACdd,KAAME,EAAEE,OAAOL,MACfF,IAAKkB,KAAKC,UAfK,EAsBnBC,QAAU,SAAAf,GACRA,EAAEgB,iBACF,IAAMvB,EAAO,EAAKwB,MAAML,aAExB,GAAgB,KAAZnB,EAAKK,KAAU,CACjB,IAAMoB,EAAQ,sBAAO,EAAKD,MAAM7B,OAAlB,CAAyBK,IAEvC,EAAKkB,SAAS,CACZvB,MAAO8B,EACPN,aAAc,CACZd,KAAK,GACLH,IAAK,QAjCM,EAwCnBM,UAAY,SAACH,EAAKH,GAChB,IAAMP,EAAQ,EAAK6B,MAAM7B,MACzBA,EAAM+B,SAAQ,SAAA1B,GACRA,EAAKE,MAAMA,IACdF,EAAKK,KAAMA,MAGd,EAAKa,SAAS,CACZvB,MAAMA,KAhDS,EAmDnBiB,YAAc,SAAAV,GACZ,IACMyB,EADW,EAAKH,MAAM7B,MACDiC,QAAO,SAAA5B,GAAI,OACpCA,EAAKE,MAAMA,KACX,EAAKgB,SAAS,CAACvB,MAAOgC,KArDxB,EAAKH,MAAO,CACV7B,MAAM,GACNwB,aAAc,CACZd,KAAK,GACLH,IAAI,KANS,E,qDA2DhB,OACC,yBAAKD,UAAU,OACb,gCACE,0BAAM4B,GAAG,aAAaC,SAAUC,KAAKT,SACnC,2BAAOnB,KAAK,OAAO6B,YAAY,aAC/B5B,MAAO2B,KAAKP,MAAML,aAAad,KAC/BC,SAAUyB,KAAKd,cACf,4BAAQd,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWR,MAASoC,KAAKP,MAAM7B,MAC9BiB,YAAemB,KAAKnB,YACrBJ,UAAWuB,KAAKvB,iB,GAxENyB,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.09c0775f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listitems.css' ; \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome' ;\r\n\r\n\r\n\r\n\r\nfunction Listitems (props) {\r\n    \r\n        const listItems = props.items;\r\n           console.log(listItems)\r\n        const newListItems = listItems.map(item => {\r\n                return (\r\n                    <div className=\"list\" key={item.key}>\r\n                        <p>\r\n                            <input type=\"text\"  value={item.text}\r\n                            onChange= {e =>{ \r\n                                props.setUpdate(e.target.value , item.key)\r\n                            }\r\n                            }\r\n                            />\r\n                            <span>\r\n                            <FontAwesomeIcon icon='trash' className=\"faiicons\" \r\n                            onClick={ () => props.deleteItems(item.key)}/>\r\n                            </span>\r\n                        </p> \r\n                    </div>\r\n                )\r\n        })\r\n        return (\r\n            <div>{newListItems}</div>\r\n        )\r\n}\r\n\r\nexport default Listitems;","import React from 'react';\nimport Listitems from './listitems';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash) ;\n\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); \n    this.state= {\n      items:[],\n      currentItems: {\n        text:'',\n        key:''\n      }\n    }  \n  }\n\n  handleInput = e => {\n    this.setState({\n      currentItems: {\n      text: e.target.value , \n      key: Date.now()}\n     })\n  }\n   \n\n\n\n  addItem = e => {\n    e.preventDefault();\n    const item = this.state.currentItems;\n    \n    if (item.text!==''){\n      const newItems = [...this.state.items, item];\n    \n      this.setState({\n        items: newItems,\n        currentItems: {\n          text:'',\n          key: '',\n        }\n       })\n    }\n     \n  }\n\n  setUpdate = (text,key) => {\n    const items = this.state.items ;\n    items.forEach(item =>{  \n      if (item.key===key){\n       item.text =text;\n      }\n    })\n    this.setState({\n      items:items\n    })\n  }\n  deleteItems = key => {\n    const dltItems = this.state.items;\n    const fltritems = dltItems.filter(item =>\n      item.key!==key);\n      this.setState({items: fltritems})  \n  }\n\n   render () {\n     return (\n      <div className=\"App\"> \n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter text\" \n            value={this.state.currentItems.text} \n            onChange={this.handleInput}></input>\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <Listitems items = {this.state.items}\n         deleteItems = {this.deleteItems}\n        setUpdate={this.setUpdate}></Listitems>\n      </div>\n     );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}